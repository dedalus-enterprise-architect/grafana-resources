apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: dedalus-grafanaoperator-template
metadata:
  annotations:
    description: |-
      Grafana Instance definition with persistent storage and oath proxy authentication.
      For more information about using this template, including OpenShift considerations, see https://github.com/dedalus-enterprise-architect/grafana-resources/blob/master/README.md.
    iconClass: icon-d4center
    tags: dedalus-grafanaoperator,dedalus
  name: dedalus-grafanaoperator
objects:

# :::
# ::: It creates the Grafana instance with the following features:
# :::   - persistent storage
# :::   - oAuth login
# :::
- apiVersion: integreatly.org/v1alpha1
  kind: Grafana
  metadata:
    name: grafana-persistent-oauth
    labels:
      app: grafana-dedalus
  spec:
    client:
      preferService: true
    config:
      # env: 
      # - name: ARGS
      #   value: "-v=10"
      # envFrom:
      # - secretRef:
      #     name: license-secret
      # volumes:
      # - name: <volume_name>
      #   configMap:
      #     name: <configmap_name>
      # volumeMounts:
      # - mountPath: <directory_name>
      #   name: <volume_name>
      # tolerations:
      # - operator: "Exists"
      auth:
        disable_login_form: false
        disable_signout_menu: false
      auth.anonymous:
        enabled: true
      auth.basic:
        enabled: true
      auth.proxy:
        enable_login_token: true
        enabled: true
        header_name: X-Forwarded-User
        header_property: username
      log:
        level: warn
        mode: console
      # security:
      #   admin_password: admin
      #   admin_user: admin
    configMaps:
      - grafana-oauth-certs
    containers:
    - args:
        - -provider=openshift
        - -pass-basic-auth=false
        - -https-address=:9091
        - -http-address=
        - -email-domain=*
        - -upstream=http://localhost:3000
        # If you uncomment this 2 flags the users will need "cluster-monitor-view" role to access grafana
        #- '-openshift-sar={"resource": "namespaces", "verb": "get"}'
        #- '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
        - -tls-cert=/etc/tls/private/tls.crt
        - -tls-key=/etc/tls/private/tls.key
        - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
        - -cookie-secret-file=/etc/proxy/secrets/session_secret
        - -openshift-service-account=grafana-serviceaccount
        - -openshift-ca=/etc/pki/tls/cert.pem
        - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - -openshift-ca=/etc/grafana-configmaps/grafana-oauth-certs/ca-bundle.crt
        - -skip-auth-regex=^/metrics
      image: quay.io/openshift/origin-oauth-proxy
      name: grafana-proxy
      ports:
        - containerPort: 9091
          name: https
          protocol: TCP
      resources: {}
      volumeMounts:
        - mountPath: /etc/tls/private
          name: secret-grafana-tls
          readOnly: false
        - mountPath: /etc/proxy/secrets
          name: secret-grafana-proxy
          readOnly: false
    # Do NOT use file storage to persist grafana storage
    dataStorage:
      class: ${STORAGECLASS}
      labels:
        app: grafana-dedalus
      accessModes:
        - ReadWriteOnce
      size: 10Gi
    dashboardLabelSelector:
      - matchExpressions:
        - key: app
          operator: In
          values:
          - grafana-dedalus
    # ingress:
    #   annotations:
    #     service.beta.openshift.io/serving-cert-secret-name: grafana-tls
    #   enabled: true
    #   targetPort: https
    #   termination: reencrypt
    resources:
      limits:
        cpu: 500m
        memory: 1000Mi
      requests:
        cpu: 50m
        memory: 200Mi
    secrets:
      - grafana-tls
      - grafana-proxy
    service:
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: grafana-tls
      ports:
        - name: https
          port: 9091
          protocol: TCP
          targetPort: https
    serviceAccount:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana-persistent-oauth-access"}}'
# :::
# ::: It needed for Grafana ReadOnly Login - OAuth Athentication
# :::
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: grafana-persistent-oauth-access
    labels:
      app: grafana-dedalus
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: grafana-tls
  spec:
    port:
      targetPort: https
    tls:
      termination: reencrypt
    to:
      kind: Service
      name: grafana-service
# :::
# ::: It needed for Grafana Administrator Login - Native Authentication
# ::: Credentials stored in the secret: "grafana-admin-credentials"
# :::
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: grafana-persistent-oauth-admin
    labels:
      app: grafana-dedalus
  spec:
    port:
      targetPort: grafana
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: grafana-service
parameters:
- name: NAMESPACE
  displayName: Namespace where the grafana Operator will be installed in
  description: Type the Namespace where the grafana Operator will be installed in
  required: true
  value: dedalus-monitoring
- name: STORAGECLASS
  displayName: Storage Class
  description: Type the Storage Class available on the cluster
  required: false
  value: 